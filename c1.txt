import cv2
import matplotlib.pyplot as plt
config_file = r"C:\Users\gskee\Downloads\ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt"
frozen_model = r"C:\Users\gskee\Downloads\frozen_inference_graph.pb"
model=cv2.dnn_DetectionModel(frozen_model,config_file)
classLabels = []
file_name = r"C:\Users\gskee\Downloads\coco.text"

with open(file_name, 'rt') as fpt:
    classLabels = fpt.read().rstrip('\n').split('\n')

print(classLabels)
print(len(classLabels))
# Set input size for the model
model.setInputSize(320, 320)

# Normalize the input image
model.setInputScale(1.0 / 127.5)  # Scale factor for normalization

# Mean subtraction
model.setInputMean((127.5, 127.5, 127.5))  # Mean values for each channel

# Swap Red and Blue channels (used in some models that expect BGR format)
model.setInputSwapRB(True)

img=cv2.imread(r"C:\Users\gskee\Downloads\bicycle.jpg")
plt.imshow(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))
ClassIndex,confidence,bbox=model.detect(img,confThreshold=0.5)

font_scale=3
font=cv2.FONT_HERSHEY_PLAIN
for ClassInd,conf,boxes in zip(ClassIndex.flatten(),confidence.flatten(),bbox):
    cv2.rectangle(img,boxes,(255,0,0),2)
    cv2.putText(img, classLabels[ClassInd-1], (boxes[0]+10, boxes[1]+40), font, fontScale=font_scale, color=(0,255,0), thickness=3)

plt.imshow(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))
cap = cv2.VideoCapture(1)

# Check if the video is opened correctly
if not cap.isOpened():
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        raise Exception("Cannot open webcam")

font_scale = 3
font = cv2.FONT_HERSHEY_PLAIN

while True:
    ret, frame = cap.read()

    if not ret:
        break

    # Assuming `model` is defined elsewhere and has a `detect` method
    ClassIndex, confidence, bbox = model.detect(frame, confThreshold=0.55)  # Adjust the threshold as needed

    print(ClassIndex)

    if len(ClassIndex) > 0:
        for ClassInd, conf, boxes in zip(ClassIndex.flatten(), confidence.flatten(), bbox):
            if ClassInd >= 0:  # Make sure the class index is valid
                cv2.rectangle(frame, (int(boxes[0]), int(boxes[1])), (int(boxes[2]), int(boxes[3])), (255, 0, 0), 2)
                cv2.putText(frame, classLabels[ClassInd - 1], (int(boxes[0]) + 10, int(boxes[1]) + 40), font, fontScale=font_scale, color=(0, 255, 0), thickness=3)

    cv2.imshow('Object Detection Tutorial', frame)

    if cv2.waitKey(2) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
